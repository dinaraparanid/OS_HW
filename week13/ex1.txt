Input:
thread resource
1 2
3 0
1 0
3 2
1 1
3 1

Output:
Mutexes locked by thread 1:
Thread 1 is created
Mutexes locked by thread 3:
Thread 3 is created
Mutexes locked by thread 1:
Mutexes locked by thread 3:
Mutexes locked by thread 1:
Mutexes locked by thread 3:
Thread 1 is trying to lock mutex 2
Thread 1 has unlocked mutex 2
Thread 1 is trying to lock mutex 0
Thread 1 has unlocked mutex 0
Thread 1 is trying to lock mutex 1
Thread 1 has unlocked mutex 1
Thread 1 is terminating
Thread 3 is trying to lock mutex 0
Thread 3 has unlocked mutex 0
Thread 3 is trying to lock mutex 2
Thread 3 has unlocked mutex 2
Thread 3 is trying to lock mutex 1
Thread 3 has unlocked mutex 1
Thread 3 is terminating
No deadlocks

In the current implementation with sleep() no deadlocks will ever happen,
since each thread may lock only a single resource at a time.
It means that all requests will follow each other with some timeouts,
however, it is not possible to acquire multiple resources in a single moment,
since sleep() is blocking and task was not stated to use asynchronous API with select().
That is why, deadlock will never appear in the current implementation.

In case if we manage locks explicitly or lock mutexes asynchronously,
deadlock may appear because multiple threads may lock multiple resources.